# Generated from gator/grammar/TemplateLexer.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,14,146,6,-1,6,-1,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,
        4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,
        12,7,12,2,13,7,13,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,5,
        0,43,8,0,10,0,12,0,46,9,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,
        3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,5,4,86,8,4,10,
        4,12,4,89,9,4,1,4,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,4,
        9,103,8,9,11,9,12,9,104,1,10,1,10,3,10,109,8,10,1,10,3,10,112,8,
        10,1,11,1,11,4,11,116,8,11,11,11,12,11,117,1,12,5,12,121,8,12,10,
        12,12,12,124,9,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,
        12,1,13,5,13,137,8,13,10,13,12,13,140,9,13,1,13,1,13,1,13,1,13,1,
        13,3,44,122,138,0,14,3,1,5,2,7,3,9,4,11,5,13,6,15,7,17,8,19,9,21,
        10,23,11,25,12,27,13,29,14,3,0,1,2,4,4,0,60,60,62,62,123,123,125,
        125,2,0,9,9,32,32,2,0,65,90,97,122,3,0,65,90,95,95,97,122,151,0,
        3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,
        1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,
        1,0,0,0,0,25,1,0,0,0,1,27,1,0,0,0,2,29,1,0,0,0,3,31,1,0,0,0,5,49,
        1,0,0,0,7,61,1,0,0,0,9,70,1,0,0,0,11,75,1,0,0,0,13,93,1,0,0,0,15,
        95,1,0,0,0,17,97,1,0,0,0,19,99,1,0,0,0,21,102,1,0,0,0,23,111,1,0,
        0,0,25,113,1,0,0,0,27,122,1,0,0,0,29,138,1,0,0,0,31,32,5,60,0,0,
        32,33,5,116,0,0,33,34,5,101,0,0,34,35,5,109,0,0,35,36,5,112,0,0,
        36,37,5,108,0,0,37,38,5,97,0,0,38,39,5,116,0,0,39,40,5,101,0,0,40,
        44,1,0,0,0,41,43,9,0,0,0,42,41,1,0,0,0,43,46,1,0,0,0,44,45,1,0,0,
        0,44,42,1,0,0,0,45,47,1,0,0,0,46,44,1,0,0,0,47,48,5,62,0,0,48,4,
        1,0,0,0,49,50,5,60,0,0,50,51,5,47,0,0,51,52,5,116,0,0,52,53,5,101,
        0,0,53,54,5,109,0,0,54,55,5,112,0,0,55,56,5,108,0,0,56,57,5,97,0,
        0,57,58,5,116,0,0,58,59,5,101,0,0,59,60,5,62,0,0,60,6,1,0,0,0,61,
        62,5,60,0,0,62,63,5,101,0,0,63,64,5,120,0,0,64,65,5,101,0,0,65,66,
        5,99,0,0,66,67,5,62,0,0,67,68,1,0,0,0,68,69,6,2,0,0,69,8,1,0,0,0,
        70,71,5,123,0,0,71,72,5,123,0,0,72,73,1,0,0,0,73,74,6,3,1,0,74,10,
        1,0,0,0,75,76,5,60,0,0,76,77,5,99,0,0,77,78,5,111,0,0,78,79,5,110,
        0,0,79,80,5,116,0,0,80,81,5,101,0,0,81,82,5,110,0,0,82,83,5,116,
        0,0,83,87,1,0,0,0,84,86,3,23,10,0,85,84,1,0,0,0,86,89,1,0,0,0,87,
        85,1,0,0,0,87,88,1,0,0,0,88,90,1,0,0,0,89,87,1,0,0,0,90,91,5,47,
        0,0,91,92,5,62,0,0,92,12,1,0,0,0,93,94,5,60,0,0,94,14,1,0,0,0,95,
        96,5,62,0,0,96,16,1,0,0,0,97,98,5,123,0,0,98,18,1,0,0,0,99,100,5,
        125,0,0,100,20,1,0,0,0,101,103,8,0,0,0,102,101,1,0,0,0,103,104,1,
        0,0,0,104,102,1,0,0,0,104,105,1,0,0,0,105,22,1,0,0,0,106,112,7,1,
        0,0,107,109,5,13,0,0,108,107,1,0,0,0,108,109,1,0,0,0,109,110,1,0,
        0,0,110,112,5,10,0,0,111,106,1,0,0,0,111,108,1,0,0,0,112,24,1,0,
        0,0,113,115,7,2,0,0,114,116,7,3,0,0,115,114,1,0,0,0,116,117,1,0,
        0,0,117,115,1,0,0,0,117,118,1,0,0,0,118,26,1,0,0,0,119,121,9,0,0,
        0,120,119,1,0,0,0,121,124,1,0,0,0,122,123,1,0,0,0,122,120,1,0,0,
        0,123,125,1,0,0,0,124,122,1,0,0,0,125,126,5,60,0,0,126,127,5,47,
        0,0,127,128,5,101,0,0,128,129,5,120,0,0,129,130,5,101,0,0,130,131,
        5,99,0,0,131,132,5,62,0,0,132,133,1,0,0,0,133,134,6,12,2,0,134,28,
        1,0,0,0,135,137,9,0,0,0,136,135,1,0,0,0,137,140,1,0,0,0,138,139,
        1,0,0,0,138,136,1,0,0,0,139,141,1,0,0,0,140,138,1,0,0,0,141,142,
        5,125,0,0,142,143,5,125,0,0,143,144,1,0,0,0,144,145,6,13,2,0,145,
        30,1,0,0,0,11,0,1,2,44,87,104,108,111,117,122,138,3,5,1,0,5,2,0,
        4,0,0
    ]

class TemplateLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    EXEC = 1
    EXPR = 2

    OPEN_TEMPLATE = 1
    CLOSE_TEMPLATE = 2
    EXEC_OPEN = 3
    EXPR_OPEN = 4
    CONTENT = 5
    OPEN_TAG = 6
    CLOSE_TAG = 7
    OPEN_SINGLE_BRACE = 8
    CLOSE_SINGLE_BRACE = 9
    TEXT = 10
    WS = 11
    IDENT = 12
    EXEC_BODY = 13
    EXPR_BODY = 14

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE", "EXEC", "EXPR" ]

    literalNames = [ "<INVALID>",
            "'</template>'", "'<exec>'", "'{{'", "'<'", "'>'", "'{'", "'}'" ]

    symbolicNames = [ "<INVALID>",
            "OPEN_TEMPLATE", "CLOSE_TEMPLATE", "EXEC_OPEN", "EXPR_OPEN", 
            "CONTENT", "OPEN_TAG", "CLOSE_TAG", "OPEN_SINGLE_BRACE", "CLOSE_SINGLE_BRACE", 
            "TEXT", "WS", "IDENT", "EXEC_BODY", "EXPR_BODY" ]

    ruleNames = [ "OPEN_TEMPLATE", "CLOSE_TEMPLATE", "EXEC_OPEN", "EXPR_OPEN", 
                  "CONTENT", "OPEN_TAG", "CLOSE_TAG", "OPEN_SINGLE_BRACE", 
                  "CLOSE_SINGLE_BRACE", "TEXT", "WS", "IDENT", "EXEC_BODY", 
                  "EXPR_BODY" ]

    grammarFileName = "TemplateLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


